import java.util.Deque;
import java.util.ArrayDeque;

class Tester {
    
    public static Deque<Integer> changeSmallest(Deque<Integer> inputStack) {
		 if (inputStack.isEmpty()) {
            return inputStack; 
        }
        
        int minValue = Integer.MAX_VALUE;
        Deque<Integer> tempStack = new ArrayDeque<>();
        int countMin = 0;
        
        while (!inputStack.isEmpty()) {
            int current = inputStack.pop();
            if (current < minValue) {
                minValue = current;
                countMin = 1;
            } else if (current == minValue) {
                countMin++;
            }
            tempStack.push(current);
        }
        
        while (!tempStack.isEmpty()) {
            int current = tempStack.pop();
            if (current != minValue) {
                inputStack.push(current);
            }
        }
        
        for (int i = 0; i < countMin; i++) {
            inputStack.push(minValue);
        }
        
        return inputStack;
		return null;
	}

	public static void main(String[] args) {
		
		Deque<Integer> inputStack = new ArrayDeque<Integer>();
		inputStack.push(10);
		inputStack.push(8);
		inputStack.push(5);
		inputStack.push(12);
		inputStack.push(5);
	
		Deque<Integer> updatedStack = changeSmallest(inputStack);
		
		System.out.println("Stack After Modification:");
		for (Integer value : updatedStack)
			System.out.println(value);
	}
}
